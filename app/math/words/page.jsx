"use client"; // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç

import { useState, useEffect } from "react";

const words = [
  "apples",
  "bananas",
  "oranges",
  "strawberries",
  "grapes",
  "lettuce",
  "spinach",
  "carrots",
  "potatoes",
  "tomatoes",
  "onions",
  "garlic",
  "bell peppers",
  "cucumbers",
  "broccoli",
  "cauliflower",
  "zucchini",
  "mushrooms",
  "avocados",
  "lemons",
  "limes",
  "blueberries",
  "raspberries",
  "peaches",
  "pears",
  "pineapple",
  "watermelon",
  "cantaloupe",
  "kiwi",
  "mangoes",
  "chicken",
  "beef",
  "pork",
  "salmon",
  "shrimp",
  "eggs",
  "milk",
  "cheese",
  "yogurt",
  "butter",
  "bread",
  "rice",
  "pasta",
  "oatmeal",
  "cereal",
  "flour",
  "sugar",
  "honey",
  "olive oil",
  "peanut butter",
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞
const shuffleArray = (array) => {
  const shuffled = [...array];
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
};

const MemoryGame = () => {
  const [currentStep, setCurrentStep] = useState(1); // –ù–∞—á–∏–Ω–∞–µ–º —Å —à–∞–≥–∞ 1 (–¥–≤–∞ —Å–ª–æ–≤–∞)
  const [droppedWords, setDroppedWords] = useState([]); // –ü–µ—Ä–µ—Ç–∞—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
  const [gameOver, setGameOver] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
  const [message, setMessage] = useState(""); // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞
  const [shuffledWords, setShuffledWords] = useState([]); // –ü–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const [gameWords, setGameWords] = useState([]); // –°–ª–æ–≤–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã (—Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫)
  const [score, setScore] = useState(0); // –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç

  // –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ª–æ–≤–∞
  useEffect(() => {
    startNewGame();
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
  const startNewGame = () => {
    const shuffledGameWords = shuffleArray(words); // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ª–æ–≤–∞
    setGameWords(shuffledGameWords); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤
    setCurrentStep(1); // –ù–∞—á–∏–Ω–∞–µ–º —Å —à–∞–≥–∞ 1 (–¥–≤–∞ —Å–ª–æ–≤–∞)
    setDroppedWords([shuffledGameWords[0]]); // –ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ —É–∂–µ –≤ –ª–µ–≤–æ–º –ø–æ–ª–µ
    setShuffledWords([shuffledGameWords[1]]); // –í—Ç–æ—Ä–æ–µ —Å–ª–æ–≤–æ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –ø—Ä–∞–≤–æ–º –ø–æ–ª–µ
    setGameOver(false);
    setMessage("");
    setScore(1); // –ù–∞—á–∏–Ω–∞–µ–º —Å –æ–¥–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ—Ç–∞—â–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
  const nextStep = () => {
    if (currentStep < gameWords.length - 1) {
      setCurrentStep(currentStep + 1); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–≥
      setDroppedWords([]); // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
      setShuffledWords(shuffleArray(gameWords.slice(0, currentStep + 2))); // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    } else {
      setMessage(`üéâ You Win! Score: ${words.length}`); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç
      setGameOver(true);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è drop –¥–ª—è –ø–æ–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  const handleDrop = (e) => {
    e.preventDefault();
    const word = e.dataTransfer.getData("text/plain");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –ø–µ—Ä–µ—Ç–∞—â–µ–Ω–æ —Å–ª–æ–≤–æ
    if (word === gameWords[droppedWords.length]) {
      setDroppedWords([...droppedWords, word]); // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ –º–∞—Å—Å–∏–≤ –ø–µ—Ä–µ—Ç–∞—â–µ–Ω–Ω—ã—Ö
      setScore(droppedWords.length + 1); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç

      // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ—Ç–∞—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ shuffledWords
      setShuffledWords((prev) => prev.filter((w) => w !== word));

      // –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ –ø–µ—Ä–µ—Ç–∞—â–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
      if (droppedWords.length === currentStep) {
        nextStep();
      }
    } else {
      setMessage(`Game Over`); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç
      setGameOver(true);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è drag over –¥–ª—è –ø–æ–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  const handleDragOver = (e) => {
    e.preventDefault();
  };

  return (
    <div className="min-h-screen bg-gradient-to-br select-none from-purple-100 to-blue-100 sm:pt-12 p-8">
      <div className="max-w-xl mx-auto">
        <h1 className="text-4xl font-bold text-center text-purple-900 mb-8">
          I Went To The Market And Bought
        </h1>

        {/* –î–ª–∏–Ω–∞ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ */}
        <div
          className={
            !gameOver
              ? "text-center text-2xl font-semibold text-purple-800 mb-6"
              : "hidden"
          }
        >
          Score: {currentStep + 1}
        </div>

        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏–≥—Ä—ã */}
        {message && (
          <div
            className={`p-4 m-6 h-[200px] shadow-lg flex flex-col gap-4 text-white justify-center items-center rounded-lg text-center text-5xl font-semibold ${
              gameOver && message.includes("Game")
                ? "bg-red-500 text-gray-900"
                : "bg-green-100 text-green-800"
            }`}
          >
            <p>{message}</p>
            <p className="text-2xl">Score: {currentStep + 1}</p>
          </div>
        )}

        {/* –î–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –≤—Å–µ–≥–¥–∞ –≤ —Ä—è–¥, –Ω–æ —É–∂–µ */}
        <div className={!gameOver ? "grid grid-row-2 gap-2" : "hidden"}>
          {/* –ü–æ–ª–µ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è —Å–ª–æ–≤ */}
          <div
            className="p-4 bg-white min-h-24 rounded-lg shadow-lg border border-purple-100"
            onDrop={handleDrop}
            onDragOver={handleDragOver}
          >
            {/* <h2 className="text-xl font-semibold text-purple-800 mb-4">2</h2> */}
            <div className="flex flex-wrap gap-2">
              {droppedWords.map((word, index) => (
                <div
                  key={index}
                  className="p-2 w-auto bg-purple-50 text-purple-900 rounded-lg shadow-sm text-center"
                >
                  {word}
                </div>
              ))}
            </div>
          </div>

          {/* –ü–æ–ª–µ —Å –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è */}
          <div className="p-4 bg-white min-h-24 relative rounded-lg shadow-lg border border-purple-100">
            {/* <h2 className="text-xl font-semibold text-blue-800 mb-4">1</h2> */}
            <div className="flex flex-wrap gap-2">
              {!gameOver &&
                shuffledWords.map((word, index) => (
                  <div
                    key={index}
                    draggable
                    onDragStart={(e) =>
                      e.dataTransfer.setData("text/plain", word)
                    }
                    className="p-2 w-auto bg-blue-50 text-blue-900 rounded-lg shadow-sm text-center cursor-move hover:bg-blue-100 transition-colors"
                  >
                    {word}
                  </div>
                ))}
            </div>

            <div
              className={`${
                currentStep === 1 ? " opacity-100" : " opacity-0"
              } transition-all duration-1000 absolute left-0 -translate-x-6 -translate-y-4 top-0`}
            >
              <img
                src="/up-arrow.svg"
                alt=""
                className="h-6 w-6 rotate-45 opacity-50"
              />
            </div>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –∏–≥—Ä—ã */}
        {gameOver && (
          <div className="flex justify-center mt-10">
            <button
              onClick={startNewGame}
              className="px-6 py-3 bg-purple-600 text-white rounded-lg shadow-lg hover:bg-purple-700 transition-colors"
            >
              Start Game
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default MemoryGame;

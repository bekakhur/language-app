"use client";
import { useEffect, useRef, useState } from "react";

export default function GestureRecognition() {
  const videoRef = useRef(null);
  const [gesture, setGesture] = useState("Loading...");
  const [error, setError] = useState(null);

  useEffect(() => {
    let camera, hands;

    async function loadScript(src) {
      return new Promise((resolve, reject) => {
        const script = document.createElement("script");
        script.src = src;
        script.async = true;
        script.onload = resolve;
        script.onerror = () => reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${src}`));
        document.body.appendChild(script);
      });
    }

    async function initMediaPipe() {
      try {
        if (!window.Camera) {
          await loadScript(
            "https://cdn.jsdelivr.net/npm/@mediapipe/camera_utils/camera_utils.js"
          );
        }
        if (!window.Hands) {
          await loadScript(
            "https://cdn.jsdelivr.net/npm/@mediapipe/hands/hands.js"
          );
        }
      } catch (err) {
        setError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ MediaPipe: " + err.message);
        return;
      }

      try {
        const stream = await navigator.mediaDevices.getUserMedia({
          video: true,
        });
        if (videoRef.current) {
          videoRef.current.srcObject = stream;
        }
      } catch (err) {
        setError("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ: " + err.message);
        return;
      }

      try {
        hands = new window.Hands({
          locateFile: (file) =>
            `https://cdn.jsdelivr.net/npm/@mediapipe/hands/${file}`,
        });
      } catch (err) {
        setError("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Hands: " + err.message);
        return;
      }

      hands.setOptions({
        maxNumHands: 1,
        modelComplexity: 1,
        minDetectionConfidence: 0.7,
        minTrackingConfidence: 0.7,
      });

      hands.onResults((results) => {
        if (
          results.multiHandLandmarks &&
          results.multiHandLandmarks.length > 0
        ) {
          detectGesture(results.multiHandLandmarks[0]);
        } else {
          setGesture("");
        }
      });

      if (videoRef.current && window.Camera) {
        camera = new window.Camera(videoRef.current, {
          onFrame: async () => {
            await hands.send({ image: videoRef.current });
          },
          width: window.innerWidth,
          height: window.innerHeight,
        });
        camera.start();
      } else {
        setError("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Camera.");
      }
    }

    initMediaPipe();

    return () => {
      if (camera) camera.stop();
    };
  }, []);

  function detectGesture(landmarks) {
    const wrist = landmarks[0]; // –ó–∞–ø—è—Å—Ç—å–µ
    const thumbTip = landmarks[4]; // –ë–æ–ª—å—à–æ–π –ø–∞–ª–µ—Ü (–∫–æ–Ω—á–∏–∫)
    const indexTip = landmarks[8]; // –£–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–ª–µ—Ü (–∫–æ–Ω—á–∏–∫)
    const middleTip = landmarks[12]; // –°—Ä–µ–¥–Ω–∏–π –ø–∞–ª–µ—Ü (–∫–æ–Ω—á–∏–∫)
    const ringTip = landmarks[16]; // –ë–µ–∑—ã–º—è–Ω–Ω—ã–π –ø–∞–ª–µ—Ü (–∫–æ–Ω—á–∏–∫)
    const pinkyTip = landmarks[20]; // –ú–∏–∑–∏–Ω–µ—Ü (–∫–æ–Ω—á–∏–∫)

    const indexBase = landmarks[5]; // –û—Å–Ω–æ–≤–∞–Ω–∏–µ —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞–ª—å—Ü–∞
    const middleBase = landmarks[9]; // –û—Å–Ω–æ–≤–∞–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø–∞–ª—å—Ü–∞
    const ringBase = landmarks[13]; // –û—Å–Ω–æ–≤–∞–Ω–∏–µ –±–µ–∑—ã–º—è–Ω–Ω–æ–≥–æ –ø–∞–ª—å—Ü–∞
    const pinkyBase = landmarks[17]; // –û—Å–Ω–æ–≤–∞–Ω–∏–µ –º–∏–∑–∏–Ω—Ü–∞

    // –û—Ç–∫—Ä—ã—Ç–∞—è –ª–∞–¥–æ–Ω—å ‚úã (–≤—Å–µ –ø–∞–ª—å—Ü—ã –≤—ã—Ç—è–Ω—É—Ç—ã)
    if (
      indexTip.y < indexBase.y &&
      middleTip.y < middleBase.y &&
      ringTip.y < ringBase.y &&
      pinkyTip.y < pinkyBase.y
    ) {
      setGesture("‚úã –ú–ó–î–ê–†–û–í–ê ‚úã");
      return;
    }

    // –õ–∞–π–∫ üëç (–±–æ–ª—å—à–æ–π –ø–∞–ª–µ—Ü –≤—ã—Ç—è–Ω—É—Ç –≤–≤–µ—Ä—Ö, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–≥–Ω—É—Ç—ã)
    if (
      thumbTip.y < wrist.y &&
      indexTip.y > indexBase.y &&
      middleTip.y > middleBase.y &&
      ringTip.y > ringBase.y &&
      pinkyTip.y > pinkyBase.y
    ) {
      setGesture("üëç –í–ï–†–ò –ù–ê–ô–° üëç");
      return;
    }

    // –°—Ä–µ–¥–Ω–∏–π –ø–∞–ª–µ—Ü üñï (—Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–Ω–∏–π –ø–∞–ª–µ—Ü –≤—ã—Ç—è–Ω—É—Ç)
    if (
      middleTip.y < middleBase.y &&
      indexTip.y > indexBase.y &&
      ringTip.y > ringBase.y &&
      pinkyTip.y > pinkyBase.y
    ) {
      setGesture("üö® –°–†–ï–î–ù–ò–ô –ü–ê–õ–ï–¶ üö®");
      return;
    }

    // –î–∏–∑–ª–∞–π–∫ üëé (–≤—Å–µ –ø–∞–ª—å—Ü—ã —Å–æ–≥–Ω—É—Ç—ã, –±–æ–ª—å—à–æ–π –ø–∞–ª–µ—Ü –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤–Ω–∏–∑)
    if (
      thumbTip.y > wrist.y &&
      indexTip.y > indexBase.y &&
      middleTip.y > middleBase.y &&
      ringTip.y > ringBase.y &&
      pinkyTip.y > pinkyBase.y
    ) {
      setGesture("üëé –û–ß–ö–û üëé");
      return;
    }

    setGesture("");
  }

  return (
    <div
      style={{
        position: "relative",
        width: "auto",
        height: "auto",
        overflow: "hidden",
      }}
    >
      <video
        ref={videoRef}
        autoPlay
        playsInline
        style={{
          width: "100%",
          height: "100%",
          objectFit: "cover",
        }}
      />

      {gesture && (
        <p
          className="text-xl sm:text-[2rem]"
          style={{
            position: "absolute",
            bottom: "20px",
            left: "50%",
            transform: "translateX(-50%)",
            color: "white",
            backgroundColor: "rgba(0, 0, 0, 0.5)",
            padding: "10px 20px",
            borderRadius: "10px",
          }}
        >
          {gesture}
        </p>
      )}
    </div>
  );
}
